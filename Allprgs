/*******MYOKEN.SOL************/
pragma solidity ^0.6;
import "https://github.com/hemapallevada/BLOCKINOPENZEPPLIN/blob/master/token/ERC20/ERC20.sol";
contract MyToken is ERC20 {
    address public minter;
   constructor()ERC20("Mytoken","$") public{
       address add=tx.origin;
       _mint(add,21000000);
       minter=add;
       approve(minter,21000000);
    }
   function buyTokens(address payable minter_add,uint tokens_to_purchase) payable public{
       uint amount_required=tokens_to_purchase*2;
        require(msg.value>=amount_required,"Please send enough money to buy tokens");
        uint spend=amount_required;
        minter_add.transfer(spend);
       transferFrom(minter,msg.sender,tokens_to_purchase);

    }
     function getCurrentAddress() public view returns( address ){
 return msg.sender;
  }
  function getMinter() public view returns(address){
  return minter;
  }
}






/*************COMPANY.SOL**********************/


pragma solidity >=0.4.22 <0.7.0;
contract company{
   
    constructor()public{
    }
struct Company{
   
    address CompanyId;
    string CompanyName;
    }

mapping(address=> Company) AllCompanies;
mapping(address=> uint) AvailableCompanies;
mapping(string=> Company) NameToAddress;

function onCompanySignUp(string memory CompanyName ) public{
    
    require(isCompany(msg.sender)!=true,"Company With Same Address Already Exists");
    require(CompanyWithName(CompanyName)!=true,"Company with this name already Exists");
    Company memory cur_company;
   
    cur_company.CompanyName=CompanyName;
    cur_company.CompanyId=msg.sender;
    AllCompanies[msg.sender]=cur_company;
    NameToAddress[CompanyName]=cur_company;
    AvailableCompanies[msg.sender]=1;
    
}
function getCurrentCompany() public view returns (address){
    return msg.sender;
}

function isCompany(address add) public view returns(bool){
    if(AvailableCompanies[add]==0){
        return false;
    }return true;
}
function CompanyWithName(string memory name) public view returns(bool){
    if(isCompany(NameToAddress[name].CompanyId))
        return true;
    return false;
}
function getAddressByName(string memory name) public view returns(address ){
    require(CompanyWithName(name),"No company with this name");
   return NameToAddress[name].CompanyId;
}
function getCompany(address id) public view returns(string memory){
require(isCompany(id),"No comp with this address");
return AllCompanies[id].CompanyName;
}
}





/*****************************EMPLOYEE.SOL*****************************/


pragma solidity >=0.4.22 <0.7.0;
//import 'MyToken.sol';
pragma experimental ABIEncoderV2;
contract MyToken{
    function minter() public view returns(address) {}
    function approve(address a,uint amount) public{}
    function balanceOf(address add) public view returns(uint){}
    function transferFrom(address send,address reciever, uint amount) public{}
}
contract company{
    function isCompany(address companyAdd) public view returns(bool){}
    function getAddressByName(string memory name) public view returns(address ){}
    function CompanyWithName(string memory name) public view returns(bool){}
}
contract Employee{
    company companyObj;
    MyToken tokenObject;
    constructor(address add,address addressCom) public{
     instantiateMyToken(add);
     instantiateCompany(addressCom);
     
     }
struct profileEach{
string name;
address Personaddress;
address CompanyId;
string role;
uint Salary;
string Company;
bool CompanyVerified;
string[][] educationQualifications;
}
mapping(address=>profileEach) profile;
function createProfile(string memory name,string memory role,uint salary,string memory Company_name)  public{
    address personaddress=msg.sender;
    require(!isRegisteredUser(personaddress),"You are already registered");
    setName(name,personaddress);
    setRole(personaddress,role);
    setSalary(personaddress,salary);
    
    setCompany(personaddress,Company_name);
    if(companyObj.CompanyWithName(Company_name)){
   address CompanyId=companyObj.getAddressByName(Company_name);
   setCanCompanyId(CompanyId,personaddress);
    }
   
    setCompanyVerified(personaddress,false);
   
}
function getProfile(address personid) public view returns(profileEach memory){
    return profile[personid];
}
function isEmployee(address employeeId) public view returns(bool){
    if(profile[employeeId].CompanyId==0x0000000000000000000000000000000000000000){
        return false;
    }
    return true;
}
function isRegisteredUser(address employeeId) public view returns(bool){
    if(bytes(profile[employeeId].name).length==0)
    return false;
    return true;
}
function verifyAsCompany(address CompanyAdd,address employeeAddress) public{
    require(companyObj.isCompany(CompanyAdd),"You need be registered as a company to verify");
    require(getCompanyId(employeeAddress)==CompanyAdd,"You can verify only your company Employees");
    setCompanyVerified(employeeAddress,true);
    
}

function verifyCompanyOfEmployee(address add,address verifier) public {
    require(profile[add].CompanyId==profile[verifier].CompanyId,"You must be Employee of that company to verify");
    require(profile[verifier].CompanyVerified,"You need to be Verified first to verify others");
    setCompanyVerified(add,true);
}

function instantiateMyToken(address tokenobj) public{
 
tokenObject=MyToken(tokenobj);
    } 
    function instantiateCompany(address addCompany) public{
        companyObj=company(addCompany);
    }
function setName(string memory name,address add) private{
    profile[add].name=name;
}
function setCompanyVerified(address add, bool status) private{
    profile[add].CompanyVerified=status;
}
function setCanCompanyId(address CompanyId,address add) private{
    profile[add].CompanyId=CompanyId;
}
function setRole(address add,string memory RoleName) private{
    profile[add].role=RoleName;
}
function setCompany(address add,string memory CompanyName) public{
    profile[add].Company=CompanyName;
}
function setSalary(address add,uint salary) private{
    profile[add].Salary=salary;
}

function getName(address add) public view returns(string memory){
    return profile[add].name;
}
function getCompanyId(address add) public view returns (address CompanyId){
   return profile[add].CompanyId;
}
function getRole(address add) public view returns (string memory){
    return profile[add].role;
}
function getCompany(address add) public view returns(string memory ){
    return profile[add].Company;
}
function getSalary(address add) public view returns(uint){
    return profile[add].Salary;
}
function getCompanyVerified(address add)  public view returns(bool){
    
    return profile[add].CompanyVerified;
}
function onJobVerified(address CandidateId) public{
    setCompanyVerified(CandidateId,true);
}


struct aboutPostsandLogin{
   uint lastlogin;
   uint totalposts;
   uint conCoins;
}
function onSignUp(address UserId) payable public{
    //require(!isRegisteredUser(UserId),"You are already registered");
    tokenObject.approve(tokenObject.minter(),20);
    tokenObject.approve(UserId,20);
    tokenObject.transferFrom(tokenObject.minter(),UserId,20);
   
    PostsandLogin[UserId].lastlogin=now;
    PostsandLogin[UserId].totalposts=0;
    PostsandLogin[UserId].conCoins=0;
}

function onDocumentUpload() public{
    //Yet to implement
}
function getBalance (address ass) public view returns(uint){
    return tokenObject.balanceOf(ass);
}
mapping(address=>aboutPostsandLogin) PostsandLogin;

function onLogin(address userId) public{
  uint  x=now;
  address minteradd=tokenObject.minter();
    if(x-PostsandLogin[userId].lastlogin>86400 && x-PostsandLogin[userId].lastlogin<=172800){
        if(PostsandLogin[userId].conCoins<35){
            tokenObject.approve(tokenObject.minter(),35);
            tokenObject.approve(userId,35);
            tokenObject.transferFrom(minteradd,userId,PostsandLogin[userId].conCoins+5);
            PostsandLogin[userId].conCoins+=5;
        }
        else if(x-PostsandLogin[userId].lastlogin>86400){
            tokenObject.approve(tokenObject.minter(),5);
            tokenObject.approve(userId,5);
             tokenObject.transferFrom(minteradd,userId,5);
             PostsandLogin[userId].conCoins=5;
        }
    }
    PostsandLogin[userId].lastlogin=x;
}

function onAnyPost(address userId) public{
    PostsandLogin[userId].totalposts+=1;
    require(PostsandLogin[userId].totalposts<20,"Sorry!, We cannot credit tokens Since you have uploaded 20 posts:)");
    tokenObject.approve(tokenObject.minter(),5);
    tokenObject.approve(userId,5);
    tokenObject.transferFrom(tokenObject.minter(),userId,5);
}
function onSelection(address selectedCan,address companyId,string memory Company,string memory rolename,uint salary) public {
setCanCompanyId(companyId,selectedCan);
setCompany(selectedCan,Company);
setRole(selectedCan,rolename);
setSalary(selectedCan,salary);
}
function createDummyProfiles(string memory name,address personaddress,address CompanyId,string memory role,uint salary,string memory Company,bool verifiedStatus) public{
    setName(name,personaddress);
    setRole(personaddress,role);
    setSalary(personaddress,salary);
    setCompany(personaddress,Company);
   setCanCompanyId(CompanyId,personaddress);
    setCompanyVerified(personaddress,verifiedStatus);
}
function getProfile_Name(address candidateId) public view returns(string memory){
    return profile[candidateId].name;
}
function getProfile_Company(address candidateId) public view returns(string memory){
    return profile[candidateId].Company;
}

function getProfile_Salary(address candidateId) public view returns(uint){
    return profile[candidateId].Salary;
}
}





/***********************projectPost.sol*****************************/


pragma solidity >=0.4.22 <0.7.0;
contract MyToken{
    function getMinter() public view returns(address) {}
    function approve(address a,uint amount) public{}
    function transferFrom(address send,address reciever, uint amount) public{}
    function balanceOf(address ad) public view returns (uint){}
}

contract company{
function getCompany(address a) public view returns(string memory){}

}
contract Employee{
   function getCompanyId(address referee) public view returns(address){}
}

contract projectPost {
    address CompanyAddress;
    address TokenAddress;
    address EmployeeAddress;
    address minter ;
    uint no_of_posts;
     MyToken TokenObj;
     company CompanyObj;
     Employee EmployeeObject;
     address owner;
   
    struct post{
        uint postId;
        uint no_of_available_posts;
        string roleName;
        uint Salary;
        string companyName;
        address companyId;
        string qualificationRequired;
	mapping(address => address[]) referers;
        bool Status;
    } post cur_post;
    
mapping(uint => post) public postAll;
   uint[] public allAvailableposts;
    
  constructor(address Tokenadd,address Companyadd,address Employeeadd) public{
   
   no_of_posts=0;
   instantiateContractMyToken( Tokenadd);
   instantiateCompany(Companyadd);
   instantiateEmployee(Employeeadd);
   minter=TokenObj.getMinter();
  }
 
  function instantiateContractMyToken(address Tokenobj) public{
TokenAddress=Tokenobj;  
TokenObj=MyToken(TokenAddress);
    }  
    function instantiateCompany(address Companyadd) public{
  CompanyAddress=Companyadd;
  CompanyObj=company(CompanyAddress);
    }  
    function instantiateEmployee(address Empobj) public{
EmployeeAddress=Empobj;  
EmployeeObject=Employee(EmployeeAddress);
    }
   
   
    struct postsOfCompany{
        address companyAddress;
        uint[] postsofthiscompany;
    }
mapping(address=>postsOfCompany) public allPostsOfCompany;
    
function postJob(string memory RoleName,uint salary,string memory qualificationRequired,uint number_of_available_posts) public payable{
        owner=msg.sender;
        
        string memory Company_name=CompanyObj.getCompany(msg.sender);
        uint cur_posts_no=no_of_posts+1;
        postAll[cur_posts_no]=post(cur_posts_no,number_of_available_posts, RoleName,salary,Company_name, msg.sender, qualificationRequired,false);
    
     
        uint totalAmount=TokenObj.balanceOf(owner);
        require(totalAmount>=(number_of_available_posts*100),"No enough balance to post a project");
       
       
postAll[cur_post.postId]=cur_post;
TokenObj.approve(owner,number_of_available_posts*100);
TokenObj.transferFrom(msg.sender,minter,number_of_available_posts*100);
 allAvailableposts.push(cur_posts_no);
 allPostsOfCompany[msg.sender].companyAddress=msg.sender;
 allPostsOfCompany[msg.sender].postsofthiscompany.push(cur_posts_no);
no_of_posts+=1;
    } 
    function getAllpostsofthisCompany(address company_address) public view returns(uint[] memory){
        return allPostsOfCompany[company_address].postsofthiscompany;
        
    }
    
     function addAReferer(address referer,address referee,uint id) public {
         require(postAll[id].no_of_available_posts!=0,"Post either doesn't exists or filled");
         address req_id=getCompanyIdByPostId(id);
         require(EmployeeObject.getCompanyId(referer)== req_id,"You should be an Employee of that company");
         postAll[id].referers[referee].push(referer);
     }
  function current_postId() public view returns(uint)  {
      return  cur_post.postId;
    }
  function  getRoleName() public view returns(string memory){
       return cur_post.roleName;
    }
    function getNoOfAvailablePosts() public view returns(uint){
    return   cur_post.no_of_available_posts;
    }
  function getotalPosts() public view returns(uint){
      return no_of_posts;
  }
  function getStatus() public view returns(bool){
      return cur_post.Status;
  }
   function  getRoleNameById(uint id) public view returns(string memory){
       require(postAll[id].no_of_available_posts!=0,"Post either doesn't exists or filled");
       return postAll[id].roleName;
    }
     function getNoOfAvailablePostsById(uint id) public view returns(uint){
         require(postAll[id].no_of_available_posts!=0,"Post either doesn't exists or filled");
    return postAll[id].no_of_available_posts;
    }
    function getStatusById(uint id) public view returns(bool){
        require(postAll[id].no_of_available_posts!=0,"Post either doesn't exists or filled");
      return postAll[id].Status;
  }
  
function getReferredPerson(uint postId,address selectedCan) public view returns (address[] memory){
    return postAll[postId].referers[selectedCan];
}
    function getSalary(uint postId) public view returns (uint){
        return postAll[postId].Salary;
        
    }
    function getCompany(uint postId) public view returns(string memory){
        return postAll[postId].companyName;
    } 
function getCompanyIdByPostId(uint postId) public view returns(address){
return postAll[postId].companyId;    }
    function createDummyPosts(uint postId,string memory roleName,uint Salary,string memory companyName,string memory qualificationRequired,bool Status,uint no_of_available_posts)public{
    postAll[postId].postId=postId;
    postAll[postId].roleName=roleName;
    postAll[postId].Salary=Salary;
    postAll[postId].companyName=companyName;
    postAll[postId].qualificationRequired=qualificationRequired;
    postAll[postId].Status=Status;
    postAll[postId].no_of_available_posts=no_of_available_posts;
}

function onCandidateSelect(address CandidateId,uint postId) public payable{
    address[] memory arr=getReferredPerson(postId,CandidateId);
    uint totalReferers=arr.length;
    require(postAll[postId].no_of_available_posts>0,"No posts left to select candidate");
    postAll[postId].no_of_available_posts=postAll[postId].no_of_available_posts-1;
    if(postAll[postId].no_of_available_posts==0){
       for (uint i=0;i<allAvailableposts.length;i++){
           if(allAvailableposts[i]==postId){
postAll[postId].Status=true;
break;
           }
       }
    }
    uint insAmount=20;
    for(uint i=0;i<totalReferers;i++){
        TokenObj.transferFrom(minter,arr[i],insAmount);
    }
}
}




/********************hashes.sol**************************/

pragma solidity ^0.6;
contract hashes{
    struct hash{
        address hashaddress;
        string hash;
        bool verified;
    }
    mapping(string=>hash) public allHashes;
    string[]  public availablehashes;
    function addAHash(string memory _hash) public{
        availablehashes.push(_hash);
        allHashes[_hash]=hash(msg.sender,_hash,false);
        
    }  
    function getallHashesLength() public view returns (uint){
        return availablehashes.length;
    }
    function verified(string memory _hash) public{
        require(msg.sender==0xFe4Ae9EE6ff6ef78d895B2ca3F971dCa47e693A5 || msg.sender==0xfe63Cae2841EE6C2b3BF05A2EeCF1aB619C88cfc,"Sorry you ar not verifier");
        allHashes[_hash].verified=true;
    }
}
